// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviePlatform.Models;

#nullable disable

namespace MoviePlatform.Migrations
{
    [DbContext(typeof(MoviePlatformDbContext))]
    [Migration("20240128055154_FixedImageUrl")]
    partial class FixedImageUrl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Turkish_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MoviePlatform.Models.Favorite", b =>
                {
                    b.Property<int>("IdMovie")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("IdMovie", "IdUser");

                    b.HasIndex("IdUser");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("MoviePlatform.Models.Movie", b =>
                {
                    b.Property<int>("IdMovie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMovie"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdDirector")
                        .HasColumnType("int");

                    b.Property<int>("IdWriter")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdMovie");

                    b.HasIndex("IdDirector");

                    b.HasIndex("IdWriter");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            IdMovie = 1,
                            Description = "The movie is about the 1912 sinking of the RMS Titanic.",
                            Genres = "Drama",
                            IdDirector = 3,
                            IdWriter = 3,
                            ImageUrl = "/images/Titanic.jpg",
                            Title = "Titanic"
                        },
                        new
                        {
                            IdMovie = 2,
                            Description = "Doctor Strange is a 2016 American superhero film based on the Marvel Comics character of the same name.",
                            Genres = "Action,Fantasy",
                            IdDirector = 2,
                            IdWriter = 1,
                            ImageUrl = "/images/DoctorStrange2.jpg",
                            Title = "Doctor Strange"
                        },
                        new
                        {
                            IdMovie = 3,
                            Description = " The original film told the true story of the Akita dog named Hachiko who lived in Japan in the 1920s. ",
                            Genres = "Drama",
                            IdDirector = 3,
                            IdWriter = 3,
                            ImageUrl = "/images/Hachi.jpg",
                            Title = "Hachi"
                        });
                });

            modelBuilder.Entity("MoviePlatform.Models.Person", b =>
                {
                    b.Property<int>("IdPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPerson"), 1L, 1);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasDegree")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Types")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPerson");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            IdPerson = 1,
                            DateOfBirth = new DateTime(1990, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Tom",
                            FullName = "Tom Smith",
                            LastName = "Smith",
                            Types = "Writer,Actor"
                        },
                        new
                        {
                            IdPerson = 2,
                            FirstName = "John",
                            FullName = "John Thompson",
                            HasDegree = true,
                            LastName = "Thompson",
                            Types = "Director"
                        },
                        new
                        {
                            IdPerson = 3,
                            DateOfBirth = new DateTime(1997, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Anne",
                            FullName = "Anne Reddle",
                            HasDegree = false,
                            LastName = "Reddle",
                            Types = "Writer,Actor,Director"
                        },
                        new
                        {
                            IdPerson = 4,
                            DateOfBirth = new DateTime(1975, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Brue",
                            FullName = "Brue Kaminski",
                            LastName = "Kaminski",
                            Types = "Actor"
                        });
                });

            modelBuilder.Entity("MoviePlatform.Models.Report", b =>
                {
                    b.Property<int>("IdReport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReport"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdReportedUser")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("ReportDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdReport");

                    b.HasIndex("IdUser");

                    b.ToTable("Reports");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Report");
                });

            modelBuilder.Entity("MoviePlatform.Models.Review", b =>
                {
                    b.Property<int>("IdReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReview"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<int>("IdMovie")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdReview");

                    b.HasIndex("IdMovie");

                    b.HasIndex("IdUser");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            IdReview = 1,
                            CreationDate = new DateTime(2024, 1, 28, 5, 51, 54, 483, DateTimeKind.Utc).AddTicks(4925),
                            Grade = 5,
                            IdMovie = 2,
                            IdUser = 1,
                            Text = "Very interesting movie."
                        },
                        new
                        {
                            IdReview = 2,
                            CreationDate = new DateTime(2024, 1, 28, 5, 51, 54, 483, DateTimeKind.Utc).AddTicks(4926),
                            Grade = 3,
                            IdMovie = 2,
                            IdUser = 2,
                            Text = "A bit boring."
                        },
                        new
                        {
                            IdReview = 3,
                            CreationDate = new DateTime(2024, 1, 28, 5, 51, 54, 483, DateTimeKind.Utc).AddTicks(4927),
                            Grade = 5,
                            IdMovie = 2,
                            IdUser = 3,
                            Text = "Impressive."
                        },
                        new
                        {
                            IdReview = 4,
                            CreationDate = new DateTime(2024, 1, 28, 5, 51, 54, 483, DateTimeKind.Utc).AddTicks(4928),
                            Grade = 4,
                            IdMovie = 2,
                            IdUser = 4,
                            Text = "Nice graphics."
                        });
                });

            modelBuilder.Entity("MoviePlatform.Models.StarsIn", b =>
                {
                    b.Property<int>("IdMovie")
                        .HasColumnType("int");

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdMovie", "IdPerson");

                    b.HasIndex("IdPerson");

                    b.ToTable("StarsIns");

                    b.HasData(
                        new
                        {
                            IdMovie = 2,
                            IdPerson = 1,
                            EndDate = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Salary = 2500.0,
                            StartDate = new DateTime(2021, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IdMovie = 2,
                            IdPerson = 3,
                            EndDate = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Salary = 2500.0,
                            StartDate = new DateTime(2021, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IdMovie = 2,
                            IdPerson = 4,
                            EndDate = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Salary = 2500.0,
                            StartDate = new DateTime(2021, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MoviePlatform.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("IdUser");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            IdUser = 1,
                            Email = "bseyhan@gmail.com",
                            Password = "12345",
                            ProfileDescription = "Standard user profile",
                            UserName = "bseyhan",
                            UserType = 0
                        },
                        new
                        {
                            IdUser = 2,
                            Email = "ann@gmail.com",
                            Password = "12345",
                            ProfileDescription = "Standard user profile",
                            UserName = "ann",
                            UserType = 0
                        },
                        new
                        {
                            IdUser = 3,
                            Email = "stom@gmail.com",
                            Password = "12345",
                            ProfileDescription = "Standard user profile",
                            UserName = "stom",
                            UserType = 0
                        },
                        new
                        {
                            IdUser = 4,
                            Email = "joe2199@gmail.com",
                            Password = "12345",
                            ProfileDescription = "Standard user profile",
                            UserName = "joe2199",
                            UserType = 0
                        },
                        new
                        {
                            IdUser = 5,
                            Email = "kkarpin@gmail.com",
                            Password = "12345",
                            ProfileDescription = "Standard user profile",
                            UserName = "kkarpin",
                            UserType = 0
                        },
                        new
                        {
                            IdUser = 6,
                            Email = "jdoe@gmail.com",
                            Password = "12345",
                            UserName = "jdoe",
                            UserType = 1
                        });
                });

            modelBuilder.Entity("MoviePlatform.Models.ClosedReport", b =>
                {
                    b.HasBaseType("MoviePlatform.Models.Report");

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("IdModerator")
                        .HasColumnType("int");

                    b.HasIndex("IdModerator");

                    b.HasDiscriminator().HasValue("ClosedReport");
                });

            modelBuilder.Entity("MoviePlatform.Models.Favorite", b =>
                {
                    b.HasOne("MoviePlatform.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("IdMovie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviePlatform.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviePlatform.Models.Movie", b =>
                {
                    b.HasOne("MoviePlatform.Models.Person", "Director")
                        .WithMany("MoviesDirected")
                        .HasForeignKey("IdDirector")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviePlatform.Models.Person", "Writer")
                        .WithMany("MoviesWritten")
                        .HasForeignKey("IdWriter")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("MoviePlatform.Models.Report", b =>
                {
                    b.HasOne("MoviePlatform.Models.User", "User")
                        .WithMany("ReportsSent")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviePlatform.Models.Review", b =>
                {
                    b.HasOne("MoviePlatform.Models.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("IdMovie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviePlatform.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviePlatform.Models.StarsIn", b =>
                {
                    b.HasOne("MoviePlatform.Models.Movie", "Movie")
                        .WithMany("Roles")
                        .HasForeignKey("IdMovie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviePlatform.Models.Person", "Actor")
                        .WithMany("Roles")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MoviePlatform.Models.ClosedReport", b =>
                {
                    b.HasOne("MoviePlatform.Models.User", "Moderator")
                        .WithMany("ReportsClosed")
                        .HasForeignKey("IdModerator")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("MoviePlatform.Models.Movie", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("MoviePlatform.Models.Person", b =>
                {
                    b.Navigation("MoviesDirected");

                    b.Navigation("MoviesWritten");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("MoviePlatform.Models.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("ReportsClosed");

                    b.Navigation("ReportsSent");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
